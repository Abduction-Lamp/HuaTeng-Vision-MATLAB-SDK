function [methodinfo,structs,enuminfo,ThunkLibName]=Proto_Camera_SDK_x64
%PROTO_CAMERA_SDK_X64 Create structures to define interfaces found in 'Matlab_Camera_SDK_x64'.

%This function was generated by loadlibrary.m parser version  on Fri Jul  4 15:31:46 2025
%perl options:'Matlab_Camera_SDK_x64.i -outfile=Proto_Camera_SDK_x64.m -thunkfile=HuaTengSDK_thunk_pcwin64.c -header=Matlab_Camera_SDK_x64.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'HuaTengSDK_thunk_pcwin64');
% CameraSdkStatus __stdcall CameraSdkInit ( int iLanguageSel ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraSdkInit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetSysOption ( char const * optionName , char const * value ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='CameraSetSysOption'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetSysOption ( char const * optionName , char * value ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='CameraGetSysOption'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraEnumerateDevice ( tSdkCameraDevInfo * pCameraList , INT * piNums ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraEnumerateDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tSdkCameraDevInfoPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% INT __stdcall CameraEnumerateDeviceEx ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CameraEnumerateDeviceEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraIsOpened ( tSdkCameraDevInfo * pCameraInfo , BOOL * pOpened ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraIsOpened'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tSdkCameraDevInfoPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraInit ( tSdkCameraDevInfo * pCameraInfo , int emParamLoadMode , int emTeam , CameraHandle * pCameraHandle ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='CameraInit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tSdkCameraDevInfoPtr', 'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraInitEx ( int iDeviceIndex , int emParamLoadMode , int emTeam , CameraHandle * pCameraHandle ); 
fcns.thunkname{fcnNum}='int32int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraInitEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraInitEx2 ( char * CameraName , CameraHandle * pCameraHandle ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='CameraInitEx2'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetCallbackFunction ( CameraHandle hCamera , CAMERA_SNAP_PROC pCallBack , PVOID pContext , CAMERA_SNAP_PROC * pCallbackOld ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraSetCallbackFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'FcnPtr', 'voidPtr', 'FcnPtrPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraUnInit ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraUnInit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetInformation ( CameraHandle hCamera , char ** pbuffer ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'stringPtrPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImageProcess ( CameraHandle hCamera , BYTE * pbyIn , BYTE * pbyOut , tSdkFrameHead * pFrInfo ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraImageProcess'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'uint8Ptr', 'tSdkFrameHeadPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImageProcessEx ( CameraHandle hCamera , BYTE * pbyIn , BYTE * pbyOut , tSdkFrameHead * pFrInfo , UINT uOutFormat , UINT uReserved ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtruint32uint32Thunk';fcns.name{fcnNum}='CameraImageProcessEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'uint8Ptr', 'tSdkFrameHeadPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraDisplayInit ( CameraHandle hCamera , HWND hWndDisplay ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraDisplayInit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'HWND__Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraDisplayRGB24 ( CameraHandle hCamera , BYTE * pFrameBuffer , tSdkFrameHead * pFrInfo ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraDisplayRGB24'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'tSdkFrameHeadPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetDisplayMode ( CameraHandle hCamera , INT iMode ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetDisplayMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetDisplayOffset ( CameraHandle hCamera , int iOffsetX , int iOffsetY ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetDisplayOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetDisplaySize ( CameraHandle hCamera , INT iWidth , INT iHeight ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetDisplaySize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetImageBuffer ( CameraHandle hCamera , tSdkFrameHead * pFrameInfo , BYTE ** pbyBuffer , UINT wTimes ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='CameraGetImageBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'tSdkFrameHeadPtr', 'uint8PtrPtr', 'uint32'};fcnNum=fcnNum+1;
% unsigned char * __stdcall CameraGetImageBufferEx ( CameraHandle hCamera , INT * piWidth , INT * piHeight , UINT wTimes ); 
fcns.thunkname{fcnNum}='voidPtrint32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='CameraGetImageBufferEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8Ptr'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSnapToBuffer ( CameraHandle hCamera , tSdkFrameHead * pFrameInfo , BYTE ** pbyBuffer , UINT wTimes ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='CameraSnapToBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'tSdkFrameHeadPtr', 'uint8PtrPtr', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSnapJpegToFile ( CameraHandle hCamera , char const * lpszFileName , BYTE byQuality , UINT wTimes ); 
fcns.thunkname{fcnNum}='int32int32cstringuint8uint32Thunk';fcns.name{fcnNum}='CameraSnapJpegToFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint8', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraReleaseImageBuffer ( CameraHandle hCamera , BYTE * pbyBuffer ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraReleaseImageBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraPlay ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraPlay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraPause ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraPause'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraStop ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraStop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraInitRecord ( CameraHandle hCamera , int iFormat , char * pcSavePath , BOOL b2GLimit , DWORD dwQuality , int iFrameRate ); 
fcns.thunkname{fcnNum}='int32int32int32cstringint32ulongint32Thunk';fcns.name{fcnNum}='CameraInitRecord'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'cstring', 'int32', 'ulong', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraStopRecord ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraStopRecord'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraPushFrame ( CameraHandle hCamera , BYTE * pbyImageBuffer , tSdkFrameHead * pFrInfo ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraPushFrame'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'tSdkFrameHeadPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSaveImage ( CameraHandle hCamera , char * lpszFileName , BYTE * pbyImageBuffer , tSdkFrameHead * pFrInfo , UINT byFileType , BYTE byQuality ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtruint32uint8Thunk';fcns.name{fcnNum}='CameraSaveImage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint8Ptr', 'tSdkFrameHeadPtr', 'uint32', 'uint8'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSaveImageEx ( CameraHandle hCamera , char * lpszFileName , BYTE * pbyImageBuffer , UINT uImageFormat , int iWidth , int iHeight , UINT byFileType , BYTE byQuality ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtruint32int32int32uint32uint8Thunk';fcns.name{fcnNum}='CameraSaveImageEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint8Ptr', 'uint32', 'int32', 'int32', 'uint32', 'uint8'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetImageResolution ( CameraHandle hCamera , tSdkImageResolution * psCurVideoSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetImageResolution'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'tSdkImageResolutionPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetImageResolutionEx ( CameraHandle hCamera , int * iIndex , char acDescription [ 32 ], int * Mode , UINT * ModeSize , int * x , int * y , int * width , int * height , int * ZoomWidth , int * ZoomHeight ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetImageResolutionEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int8Ptr', 'int32Ptr', 'uint32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetImageResolution ( CameraHandle hCamera , tSdkImageResolution * pImageResolution ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraSetImageResolution'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'tSdkImageResolutionPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetImageResolutionEx ( CameraHandle hCamera , int iIndex , int Mode , UINT ModeSize , int x , int y , int width , int height , int ZoomWidth , int ZoomHeight ); 
fcns.thunkname{fcnNum}='int32int32int32int32uint32int32int32int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetImageResolutionEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'uint32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetMediaType ( CameraHandle hCamera , INT * piMediaType ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetMediaType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetMediaType ( CameraHandle hCamera , INT iMediaType ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetMediaType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetRawMaxAvailBits ( CameraHandle hCamera , int * pMaxAvailBits ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetRawMaxAvailBits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetRawStartBit ( CameraHandle hCamera , int startBit ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetRawStartBit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetRawStartBit ( CameraHandle hCamera , int * startBit ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetRawStartBit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetAeState ( CameraHandle hCamera , BOOL bAeState ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetAeState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetAeState ( CameraHandle hCamera , BOOL * pAeState ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetAeState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetSharpness ( CameraHandle hCamera , int iSharpness ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetSharpness'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetSharpness ( CameraHandle hCamera , int * piSharpness ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetSharpness'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetLutMode ( CameraHandle hCamera , int emLutMode ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetLutMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetLutMode ( CameraHandle hCamera , int * pemLutMode ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetLutMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSelectLutPreset ( CameraHandle hCamera , int iSel ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSelectLutPreset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetLutPresetSel ( CameraHandle hCamera , int * piSel ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetLutPresetSel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetCustomLut ( CameraHandle hCamera , int iChannel , USHORT * pLut ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraSetCustomLut'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetCustomLut ( CameraHandle hCamera , int iChannel , USHORT * pLut ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetCustomLut'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetCurrentLut ( CameraHandle hCamera , int iChannel , USHORT * pLut ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetCurrentLut'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetWbMode ( CameraHandle hCamera , BOOL bAuto ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetWbMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetWbMode ( CameraHandle hCamera , BOOL * pbAuto ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetWbMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetPresetClrTemp ( CameraHandle hCamera , int iSel ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetPresetClrTemp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetPresetClrTemp ( CameraHandle hCamera , int * piSel ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetPresetClrTemp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetUserClrTempGain ( CameraHandle hCamera , int iRgain , int iGgain , int iBgain ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetUserClrTempGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetUserClrTempGain ( CameraHandle hCamera , int * piRgain , int * piGgain , int * piBgain ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetUserClrTempGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetUserClrTempMatrix ( CameraHandle hCamera , float * pMatrix ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraSetUserClrTempMatrix'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'singlePtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetUserClrTempMatrix ( CameraHandle hCamera , float * pMatrix ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetUserClrTempMatrix'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'singlePtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetClrTempMode ( CameraHandle hCamera , int iMode ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetClrTempMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetClrTempMode ( CameraHandle hCamera , int * pimode ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetClrTempMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetOnceWB ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraSetOnceWB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetOnceBB ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraSetOnceBB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetAeTarget ( CameraHandle hCamera , int iAeTarget ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetAeTarget'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetAeTarget ( CameraHandle hCamera , int * piAeTarget ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetAeTarget'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetAeExposureRange ( CameraHandle hCamera , double fMinExposureTime , double fMaxExposureTime ); 
fcns.thunkname{fcnNum}='int32int32doubledoubleThunk';fcns.name{fcnNum}='CameraSetAeExposureRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'double', 'double'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetAeExposureRange ( CameraHandle hCamera , double * fMinExposureTime , double * fMaxExposureTime ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetAeExposureRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetAeAnalogGainRange ( CameraHandle hCamera , int iMinAnalogGain , int iMaxAnalogGain ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetAeAnalogGainRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetAeAnalogGainRange ( CameraHandle hCamera , int * iMinAnalogGain , int * iMaxAnalogGain ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetAeAnalogGainRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetAeThreshold ( CameraHandle hCamera , int iThreshold ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetAeThreshold'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetAeThreshold ( CameraHandle hCamera , int * iThreshold ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetAeThreshold'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetExposureTime ( CameraHandle hCamera , double fExposureTime ); 
fcns.thunkname{fcnNum}='int32int32doubleThunk';fcns.name{fcnNum}='CameraSetExposureTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'double'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetExposureLineTime ( CameraHandle hCamera , double * pfLineTime ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetExposureLineTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetExposureTime ( CameraHandle hCamera , double * pfExposureTime ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetExposureTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetExposureTimeRange ( CameraHandle hCamera , double * pfMin , double * pfMax , double * pfStep ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetExposureTimeRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetMultiExposureTime ( CameraHandle hCamera , int index , double fExposureTime ); 
fcns.thunkname{fcnNum}='int32int32int32doubleThunk';fcns.name{fcnNum}='CameraSetMultiExposureTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'double'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetMultiExposureTime ( CameraHandle hCamera , int index , double * fExposureTime ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetMultiExposureTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetMultiExposureGain ( CameraHandle hCamera , int index , int iGain ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetMultiExposureGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetMultiExposureGain ( CameraHandle hCamera , int index , int * piGain ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetMultiExposureGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetMultiExposureGamma ( CameraHandle hCamera , int index , int iGamma ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetMultiExposureGamma'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetMultiExposureGamma ( CameraHandle hCamera , int index , int * piGamma ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetMultiExposureGamma'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetMultiExposureExpDelay ( CameraHandle hCamera , int index , double fExpDelay ); 
fcns.thunkname{fcnNum}='int32int32int32doubleThunk';fcns.name{fcnNum}='CameraSetMultiExposureExpDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'double'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetMultiExposureExpDelay ( CameraHandle hCamera , int index , double * pfExpDelay ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetMultiExposureExpDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetMultiExposureStrobeWidth ( CameraHandle hCamera , int index , double fStrobeWidth ); 
fcns.thunkname{fcnNum}='int32int32int32doubleThunk';fcns.name{fcnNum}='CameraSetMultiExposureStrobeWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'double'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetMultiExposureStrobeWidth ( CameraHandle hCamera , int index , double * pfStrobeWidth ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetMultiExposureStrobeWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetMultiExposureStrobeOutSel ( CameraHandle hCamera , int index , UINT uStrobeOutSel ); 
fcns.thunkname{fcnNum}='int32int32int32uint32Thunk';fcns.name{fcnNum}='CameraSetMultiExposureStrobeOutSel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetMultiExposureStrobeOutSel ( CameraHandle hCamera , int index , UINT * puStrobeOutSel ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetMultiExposureStrobeOutSel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetMultiExposureCount ( CameraHandle hCamera , int count ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetMultiExposureCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetMultiExposureCount ( CameraHandle hCamera , int * count ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetMultiExposureCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetMultiExposureMaxCount ( CameraHandle hCamera , int * max_count ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetMultiExposureMaxCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetMultiExposureSupported ( CameraHandle hCamera , UINT * pSupported ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetMultiExposureSupported'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetMultiExposureBlendingSupported ( CameraHandle hCamera , UINT * pSupported ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetMultiExposureBlendingSupported'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetMultiExposureBlendingEnable ( CameraHandle hCamera , BOOL bEnable ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetMultiExposureBlendingEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetMultiExposureBlendingEnable ( CameraHandle hCamera , BOOL * pbEnable ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetMultiExposureBlendingEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetMultiExposureBlendingRatios ( CameraHandle hCamera , int * pRatios , int iNumRatios ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32Thunk';fcns.name{fcnNum}='CameraSetMultiExposureBlendingRatios'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetMultiExposureBlendingRatios ( CameraHandle hCamera , int * pRatios , int * piNumRatios ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetMultiExposureBlendingRatios'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetAnalogGain ( CameraHandle hCamera , INT iAnalogGain ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetAnalogGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetAnalogGain ( CameraHandle hCamera , INT * piAnalogGain ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetAnalogGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetAnalogGainX ( CameraHandle hCamera , float fGain ); 
fcns.thunkname{fcnNum}='int32int32floatThunk';fcns.name{fcnNum}='CameraSetAnalogGainX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'single'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetAnalogGainX ( CameraHandle hCamera , float * pfGain ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetAnalogGainX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'singlePtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetAnalogGainXRange ( CameraHandle hCamera , float * pfMin , float * pfMax , float * pfStep ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetAnalogGainXRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'singlePtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetGain ( CameraHandle hCamera , int iRGain , int iGGain , int iBGain ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetGain ( CameraHandle hCamera , int * piRGain , int * piGGain , int * piBGain ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetGamma ( CameraHandle hCamera , int iGamma ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetGamma'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetGamma ( CameraHandle hCamera , int * piGamma ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetGamma'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetContrast ( CameraHandle hCamera , int iContrast ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetContrast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetContrast ( CameraHandle hCamera , int * piContrast ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetContrast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetSaturation ( CameraHandle hCamera , int iSaturation ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetSaturation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetSaturation ( CameraHandle hCamera , int * piSaturation ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetSaturation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetMonochrome ( CameraHandle hCamera , BOOL bEnable ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetMonochrome'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetMonochrome ( CameraHandle hCamera , BOOL * pbEnable ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetMonochrome'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetInverse ( CameraHandle hCamera , BOOL bEnable ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetInverse'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetInverse ( CameraHandle hCamera , BOOL * pbEnable ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetInverse'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetAntiFlick ( CameraHandle hCamera , BOOL bEnable ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetAntiFlick'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetAntiFlick ( CameraHandle hCamera , BOOL * pbEnable ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetAntiFlick'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetLightFrequency ( CameraHandle hCamera , int * piFrequencySel ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetLightFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetLightFrequency ( CameraHandle hCamera , int iFrequencySel ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetLightFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetFrameSpeed ( CameraHandle hCamera , int iFrameSpeed ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetFrameSpeed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetFrameSpeed ( CameraHandle hCamera , int * piFrameSpeed ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetFrameSpeed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetFrameRate ( CameraHandle hCamera , int RateHZ ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetFrameRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetFrameRate ( CameraHandle hCamera , int * RateHZ ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetFrameRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetParameterMode ( CameraHandle hCamera , int iMode ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetParameterMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetParameterMode ( CameraHandle hCamera , int * piTarget ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetParameterMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetParameterMask ( CameraHandle hCamera , UINT uMask ); 
fcns.thunkname{fcnNum}='int32int32uint32Thunk';fcns.name{fcnNum}='CameraSetParameterMask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSaveParameter ( CameraHandle hCamera , int iTeam ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSaveParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSaveParameterToFile ( CameraHandle hCamera , char * sFileName ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='CameraSaveParameterToFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraReadParameterFromFile ( CameraHandle hCamera , char * sFileName ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='CameraReadParameterFromFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraLoadParameter ( CameraHandle hCamera , int iTeam ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraLoadParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetCurrentParameterGroup ( CameraHandle hCamera , int * piTeam ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetCurrentParameterGroup'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetTransPackLen ( CameraHandle hCamera , INT iPackSel ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetTransPackLen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetTransPackLen ( CameraHandle hCamera , INT * piPackSel ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetTransPackLen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraIsAeWinVisible ( CameraHandle hCamera , BOOL * pbIsVisible ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraIsAeWinVisible'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetAeWinVisible ( CameraHandle hCamera , BOOL bIsVisible ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetAeWinVisible'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetAeWindow ( CameraHandle hCamera , INT * piHOff , INT * piVOff , INT * piWidth , INT * piHeight ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetAeWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetAeWindow ( CameraHandle hCamera , int iHOff , int iVOff , int iWidth , int iHeight ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetAeWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetMirror ( CameraHandle hCamera , int iDir , BOOL bEnable ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetMirror'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetMirror ( CameraHandle hCamera , int iDir , BOOL * pbEnable ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetMirror'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetHardwareMirror ( CameraHandle hCamera , int iDir , BOOL bEnable ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetHardwareMirror'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetHardwareMirror ( CameraHandle hCamera , int iDir , BOOL * pbEnable ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetHardwareMirror'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetRotate ( CameraHandle hCamera , int iRot ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetRotate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetRotate ( CameraHandle hCamera , int * iRot ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetRotate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetWbWindow ( CameraHandle hCamera , INT * PiHOff , INT * PiVOff , INT * PiWidth , INT * PiHeight ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetWbWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetWbWindow ( CameraHandle hCamera , INT iHOff , INT iVOff , INT iWidth , INT iHeight ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetWbWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraIsWbWinVisible ( CameraHandle hCamera , BOOL * pbShow ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraIsWbWinVisible'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetWbWinVisible ( CameraHandle hCamera , BOOL bShow ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetWbWinVisible'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImageOverlay ( CameraHandle hCamera , BYTE * pRgbBuffer , tSdkFrameHead * pFrInfo ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraImageOverlay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'tSdkFrameHeadPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetCrossLine ( CameraHandle hCamera , int iLine , INT x , INT y , UINT uColor , BOOL bVisible ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32uint32int32Thunk';fcns.name{fcnNum}='CameraSetCrossLine'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'uint32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetCrossLine ( CameraHandle hCamera , INT iLine , INT * px , INT * py , UINT * pcolor , BOOL * pbVisible ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetCrossLine'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr', 'int32Ptr', 'uint32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetCapability ( CameraHandle hCamera , tSdkCameraCapbility * pCameraInfo ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetCapability'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'tSdkCameraCapbilityPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetCapabilityEx ( char * sDeviceModel , tSdkCameraCapbility * pCameraInfo , PVOID hCameraHandle ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetCapabilityEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'tSdkCameraCapbilityPtr', 'voidPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraWriteSN ( CameraHandle hCamera , BYTE * pbySN , INT iLevel ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32Thunk';fcns.name{fcnNum}='CameraWriteSN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraReadSN ( CameraHandle hCamera , BYTE * pbySN , INT iLevel ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32Thunk';fcns.name{fcnNum}='CameraReadSN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetTriggerDelayTime ( CameraHandle hCamera , UINT uDelayTimeUs ); 
fcns.thunkname{fcnNum}='int32int32uint32Thunk';fcns.name{fcnNum}='CameraSetTriggerDelayTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetTriggerDelayTime ( CameraHandle hCamera , UINT * puDelayTimeUs ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetTriggerDelayTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetTriggerCount ( CameraHandle hCamera , INT iCount ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetTriggerCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetTriggerCount ( CameraHandle hCamera , INT * piCount ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetTriggerCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSoftTrigger ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraSoftTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetTriggerMode ( CameraHandle hCamera , int iModeSel ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetTriggerMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetTriggerMode ( CameraHandle hCamera , INT * piModeSel ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetTriggerMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetStrobeMode ( CameraHandle hCamera , INT iMode ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetStrobeMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetStrobeMode ( CameraHandle hCamera , INT * piMode ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetStrobeMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetStrobeDelayTime ( CameraHandle hCamera , UINT uDelayTimeUs ); 
fcns.thunkname{fcnNum}='int32int32uint32Thunk';fcns.name{fcnNum}='CameraSetStrobeDelayTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetStrobeDelayTime ( CameraHandle hCamera , UINT * upDelayTimeUs ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetStrobeDelayTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetStrobePulseWidth ( CameraHandle hCamera , UINT uTimeUs ); 
fcns.thunkname{fcnNum}='int32int32uint32Thunk';fcns.name{fcnNum}='CameraSetStrobePulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetStrobePulseWidth ( CameraHandle hCamera , UINT * upTimeUs ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetStrobePulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetStrobePolarity ( CameraHandle hCamera , INT uPolarity ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetStrobePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetStrobePolarity ( CameraHandle hCamera , INT * upPolarity ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetStrobePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetExtTrigSignalType ( CameraHandle hCamera , INT iType ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetExtTrigSignalType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetExtTrigSignalType ( CameraHandle hCamera , INT * ipType ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetExtTrigSignalType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetExtTrigShutterType ( CameraHandle hCamera , INT iType ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetExtTrigShutterType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetExtTrigShutterType ( CameraHandle hCamera , INT * ipType ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetExtTrigShutterType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetExtTrigDelayTime ( CameraHandle hCamera , UINT uDelayTimeUs ); 
fcns.thunkname{fcnNum}='int32int32uint32Thunk';fcns.name{fcnNum}='CameraSetExtTrigDelayTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetExtTrigDelayTime ( CameraHandle hCamera , UINT * upDelayTimeUs ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetExtTrigDelayTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetExtTrigBufferedDelayTime ( CameraHandle hCamera , UINT uDelayTimeUs ); 
fcns.thunkname{fcnNum}='int32int32uint32Thunk';fcns.name{fcnNum}='CameraSetExtTrigBufferedDelayTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetExtTrigBufferedDelayTime ( CameraHandle hCamera , UINT * puDelayTimeUs ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetExtTrigBufferedDelayTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetExtTrigIntervalTime ( CameraHandle hCamera , UINT uTimeUs ); 
fcns.thunkname{fcnNum}='int32int32uint32Thunk';fcns.name{fcnNum}='CameraSetExtTrigIntervalTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetExtTrigIntervalTime ( CameraHandle hCamera , UINT * upTimeUs ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetExtTrigIntervalTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetExtTrigJitterTime ( CameraHandle hCamera , UINT uTimeUs ); 
fcns.thunkname{fcnNum}='int32int32uint32Thunk';fcns.name{fcnNum}='CameraSetExtTrigJitterTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetExtTrigJitterTime ( CameraHandle hCamera , UINT * upTimeUs ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetExtTrigJitterTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetExtTrigCapability ( CameraHandle hCamera , UINT * puCapabilityMask ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetExtTrigCapability'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraPauseLevelTrigger ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraPauseLevelTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetResolutionForSnap ( CameraHandle hCamera , tSdkImageResolution * pImageResolution ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetResolutionForSnap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'tSdkImageResolutionPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetResolutionForSnap ( CameraHandle hCamera , tSdkImageResolution * pImageResolution ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraSetResolutionForSnap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'tSdkImageResolutionPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraCustomizeResolution ( CameraHandle hCamera , tSdkImageResolution * pImageCustom ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraCustomizeResolution'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'tSdkImageResolutionPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraCustomizeReferWin ( CameraHandle hCamera , INT iWinType , HWND hParent , INT * piHOff , INT * piVOff , INT * piWidth , INT * piHeight ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraCustomizeReferWin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'HWND__Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraShowSettingPage ( CameraHandle hCamera , BOOL bShow ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraShowSettingPage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraCreateSettingPage ( CameraHandle hCamera , HWND hParent , char * pWinText , CAMERA_PAGE_MSG_PROC pCallbackFunc , PVOID pCallbackCtx , UINT uReserved ); 
fcns.thunkname{fcnNum}='int32int32voidPtrcstringvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='CameraCreateSettingPage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'HWND__Ptr', 'cstring', 'FcnPtr', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraCreateSettingPageEx ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraCreateSettingPageEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetActiveSettingSubPage ( CameraHandle hCamera , INT index ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetActiveSettingSubPage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetSettingPageParent ( CameraHandle hCamera , HWND hParentWnd , DWORD Flags ); 
fcns.thunkname{fcnNum}='int32int32voidPtrulongThunk';fcns.name{fcnNum}='CameraSetSettingPageParent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'HWND__Ptr', 'ulong'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetSettingPageHWnd ( CameraHandle hCamera , HWND * hWnd ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetSettingPageHWnd'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'HWND__PtrPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraUpdateSettingPage ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraUpdateSettingPage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSpecialControl ( CameraHandle hCamera , DWORD dwCtrlCode , DWORD dwParam , LPVOID lpData ); 
fcns.thunkname{fcnNum}='int32int32ulongulongvoidPtrThunk';fcns.name{fcnNum}='CameraSpecialControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'ulong', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetFrameStatistic ( CameraHandle hCamera , tSdkFrameStatistic * psFrameStatistic ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetFrameStatistic'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'tSdkFrameStatisticPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetNoiseFilter ( CameraHandle hCamera , BOOL bEnable ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetNoiseFilter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetNoiseFilterState ( CameraHandle hCamera , BOOL * pEnable ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetNoiseFilterState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraRstTimeStamp ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraRstTimeStamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSaveUserData ( CameraHandle hCamera , UINT uStartAddr , BYTE * pbData , int ilen ); 
fcns.thunkname{fcnNum}='int32int32uint32voidPtrint32Thunk';fcns.name{fcnNum}='CameraSaveUserData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraLoadUserData ( CameraHandle hCamera , UINT uStartAddr , BYTE * pbData , int ilen ); 
fcns.thunkname{fcnNum}='int32int32uint32voidPtrint32Thunk';fcns.name{fcnNum}='CameraLoadUserData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetFriendlyName ( CameraHandle hCamera , char * pName ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='CameraGetFriendlyName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetFriendlyName ( CameraHandle hCamera , char * pName ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='CameraSetFriendlyName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSdkGetVersionString ( char * pVersionString ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='CameraSdkGetVersionString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraCheckFwUpdate ( CameraHandle hCamera , BOOL * pNeedUpdate ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraCheckFwUpdate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetFirmwareVersion ( CameraHandle hCamera , char * pVersion ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='CameraGetFirmwareVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetFirmwareVision ( CameraHandle hCamera , char * pVersion ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='CameraGetFirmwareVision'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetEnumInfo ( CameraHandle hCamera , tSdkCameraDevInfo * pCameraInfo ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetEnumInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'tSdkCameraDevInfoPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetInerfaceVersion ( CameraHandle hCamera , char * pVersion ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='CameraGetInerfaceVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetIOState ( CameraHandle hCamera , INT iOutputIOIndex , UINT uState ); 
fcns.thunkname{fcnNum}='int32int32int32uint32Thunk';fcns.name{fcnNum}='CameraSetIOState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetIOStateEx ( CameraHandle hCamera , INT iOutputIOIndex , UINT uState ); 
fcns.thunkname{fcnNum}='int32int32int32uint32Thunk';fcns.name{fcnNum}='CameraSetIOStateEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetOutPutIOState ( CameraHandle hCamera , INT iOutputIOIndex , UINT * puState ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetOutPutIOState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetOutPutIOStateEx ( CameraHandle hCamera , INT iOutputIOIndex , UINT * puState ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetOutPutIOStateEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetIOState ( CameraHandle hCamera , INT iInputIOIndex , UINT * puState ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetIOState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetIOStateEx ( CameraHandle hCamera , INT iInputIOIndex , UINT * puState ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetIOStateEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetInPutIOMode ( CameraHandle hCamera , INT iInputIOIndex , INT iMode ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetInPutIOMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetInPutIOMode ( CameraHandle hCamera , INT iInputIOIndex , INT * piMode ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetInPutIOMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetOutPutIOMode ( CameraHandle hCamera , INT iOutputIOIndex , INT iMode ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetOutPutIOMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetOutPutIOMode ( CameraHandle hCamera , INT iOutputIOIndex , INT * piMode ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetOutPutIOMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetInPutIOModeCapbility ( CameraHandle hCamera , INT iInputIOIndex , UINT * piCapbility ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetInPutIOModeCapbility'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetOutPutIOModeCapbility ( CameraHandle hCamera , INT iOutputIOIndex , UINT * piCapbility ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetOutPutIOModeCapbility'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetOutPutPWM ( CameraHandle hCamera , INT iOutputIOIndex , UINT iCycle , UINT uDuty ); 
fcns.thunkname{fcnNum}='int32int32int32uint32uint32Thunk';fcns.name{fcnNum}='CameraSetOutPutPWM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetRotaryEncDir ( CameraHandle hCamera , INT dir ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetRotaryEncDir'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetRotaryEncDir ( CameraHandle hCamera , INT * dir ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetRotaryEncDir'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetRotaryEncFreq ( CameraHandle hCamera , INT mul , INT div ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetRotaryEncFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetRotaryEncFreq ( CameraHandle hCamera , INT * mul , INT * div ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetRotaryEncFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetInPutIOFormat ( CameraHandle hCamera , INT iInputIOIndex , INT iFormat ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetInPutIOFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetInPutIOFormat ( CameraHandle hCamera , INT iInputIOIndex , INT * piFormat ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetInPutIOFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetOutPutIOFormat ( CameraHandle hCamera , INT iOutputIOIndex , INT iFormat ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetOutPutIOFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetOutPutIOFormat ( CameraHandle hCamera , INT iOutputIOIndex , INT * piFormat ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetOutPutIOFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetInPutIOFormatCapbility ( CameraHandle hCamera , INT iInputIOIndex , UINT * piCapbility ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetInPutIOFormatCapbility'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetOutPutIOFormatCapbility ( CameraHandle hCamera , INT iOutputIOIndex , UINT * piCapbility ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetOutPutIOFormatCapbility'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetAeAlgorithm ( CameraHandle hCamera , INT iIspProcessor , INT iAeAlgorithmSel ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetAeAlgorithm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetAeAlgorithm ( CameraHandle hCamera , INT iIspProcessor , INT * piAlgorithmSel ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetAeAlgorithm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetBayerDecAlgorithm ( CameraHandle hCamera , INT iIspProcessor , INT iAlgorithmSel ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetBayerDecAlgorithm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetBayerDecAlgorithm ( CameraHandle hCamera , INT iIspProcessor , INT * piAlgorithmSel ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetBayerDecAlgorithm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetIspProcessor ( CameraHandle hCamera , INT iIspProcessor ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetIspProcessor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetIspProcessor ( CameraHandle hCamera , INT * piIspProcessor ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetIspProcessor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetBlackLevel ( CameraHandle hCamera , INT iBlackLevel ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetBlackLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetBlackLevel ( CameraHandle hCamera , INT * piBlackLevel ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetBlackLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetWhiteLevel ( CameraHandle hCamera , INT iWhiteLevel ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetWhiteLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetWhiteLevel ( CameraHandle hCamera , INT * piWhiteLevel ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetWhiteLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetIspOutFormat ( CameraHandle hCamera , UINT uFormat ); 
fcns.thunkname{fcnNum}='int32int32uint32Thunk';fcns.name{fcnNum}='CameraSetIspOutFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetIspOutFormat ( CameraHandle hCamera , UINT * puFormat ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetIspOutFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetIspOutDirection ( CameraHandle hCamera , int * piHoriDir , int * piVertDir ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetIspOutDirection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% char * __stdcall CameraGetErrorString ( CameraSdkStatus iStatusCode ); 
fcns.thunkname{fcnNum}='cstringint32Thunk';fcns.name{fcnNum}='CameraGetErrorString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetImageBufferEx2 ( CameraHandle hCamera , BYTE * pImageData , UINT uOutFormat , int * piWidth , int * piHeight , UINT wTimes ); 
fcns.thunkname{fcnNum}='int32int32voidPtruint32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='CameraGetImageBufferEx2'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'uint32', 'int32Ptr', 'int32Ptr', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetImageBufferEx3 ( CameraHandle hCamera , BYTE * pImageData , UINT uOutFormat , int * piWidth , int * piHeight , UINT * puTimeStamp , UINT wTimes ); 
fcns.thunkname{fcnNum}='int32int32voidPtruint32voidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='CameraGetImageBufferEx3'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'uint32', 'int32Ptr', 'int32Ptr', 'uint32Ptr', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetCapabilityEx2 ( CameraHandle hCamera , int * pMaxWidth , int * pMaxHeight , int * pbColorCamera ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetCapabilityEx2'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraReConnect ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraReConnect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraConnectTest ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraConnectTest'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetLedEnable ( CameraHandle hCamera , int index , BOOL enable ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetLedEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetLedEnable ( CameraHandle hCamera , int index , BOOL * enable ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetLedEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetLedOnOff ( CameraHandle hCamera , int index , BOOL onoff ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetLedOnOff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetLedOnOff ( CameraHandle hCamera , int index , BOOL * onoff ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetLedOnOff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetLedDuration ( CameraHandle hCamera , int index , UINT duration ); 
fcns.thunkname{fcnNum}='int32int32int32uint32Thunk';fcns.name{fcnNum}='CameraSetLedDuration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetLedDuration ( CameraHandle hCamera , int index , UINT * duration ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetLedDuration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetLedBrightness ( CameraHandle hCamera , int index , UINT uBrightness ); 
fcns.thunkname{fcnNum}='int32int32int32uint32Thunk';fcns.name{fcnNum}='CameraSetLedBrightness'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetLedBrightness ( CameraHandle hCamera , int index , UINT * uBrightness ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetLedBrightness'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraEnableTransferRoi ( CameraHandle hCamera , UINT uEnableMask ); 
fcns.thunkname{fcnNum}='int32int32uint32Thunk';fcns.name{fcnNum}='CameraEnableTransferRoi'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetTransferRoiEnable ( CameraHandle hCamera , UINT * puEnableMask ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetTransferRoiEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetTransferRoi ( CameraHandle hCamera , int index , UINT X1 , UINT Y1 , UINT X2 , UINT Y2 ); 
fcns.thunkname{fcnNum}='int32int32int32uint32uint32uint32uint32Thunk';fcns.name{fcnNum}='CameraSetTransferRoi'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetTransferRoi ( CameraHandle hCamera , int index , UINT * pX1 , UINT * pY1 , UINT * pX2 , UINT * pY2 ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetTransferRoi'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BYTE * __stdcall CameraAlignMalloc ( int size , int align ); 
fcns.thunkname{fcnNum}='voidPtrint32int32Thunk';fcns.name{fcnNum}='CameraAlignMalloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8Ptr'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% void __stdcall CameraAlignFree ( BYTE * membuffer ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='CameraAlignFree'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetAutoConnect ( CameraHandle hCamera , BOOL bEnable ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetAutoConnect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetAutoConnect ( CameraHandle hCamera , BOOL * pbEnable ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetAutoConnect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetReConnectCounts ( CameraHandle hCamera , UINT * puCounts ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetReConnectCounts'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetSingleGrabMode ( CameraHandle hCamera , BOOL bEnable ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetSingleGrabMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetSingleGrabMode ( CameraHandle hCamera , BOOL * pbEnable ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetSingleGrabMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraRestartGrab ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraRestartGrab'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraEvaluateImageDefinition ( CameraHandle hCamera , INT iAlgorithSel , BYTE * pbyIn , tSdkFrameHead * pFrInfo , double * DefinitionValue ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraEvaluateImageDefinition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8Ptr', 'tSdkFrameHeadPtr', 'doublePtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraDrawText ( BYTE * pRgbBuffer , tSdkFrameHead * pFrInfo , char const * pFontFileName , UINT FontWidth , UINT FontHeight , char const * pText , INT Left , INT Top , UINT Width , UINT Height , UINT TextColor , UINT uFlags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrcstringuint32uint32cstringint32int32uint32uint32uint32uint32Thunk';fcns.name{fcnNum}='CameraDrawText'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr', 'tSdkFrameHeadPtr', 'cstring', 'uint32', 'uint32', 'cstring', 'int32', 'int32', 'uint32', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGigeEnumerateDevice ( char const ** ppIpList , int numIp , tSdkCameraDevInfo * pCameraList , int * piNums ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGigeEnumerateDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'stringPtrPtr', 'int32', 'tSdkCameraDevInfoPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGigeGetIp ( tSdkCameraDevInfo * pCameraInfo , char * CamIp , char * CamMask , char * CamGateWay , char * EtIp , char * EtMask , char * EtGateWay ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringcstringcstringcstringcstringThunk';fcns.name{fcnNum}='CameraGigeGetIp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tSdkCameraDevInfoPtr', 'cstring', 'cstring', 'cstring', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGigeSetIp ( tSdkCameraDevInfo * pCameraInfo , char const * Ip , char const * SubMask , char const * GateWay , BOOL bPersistent ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringcstringint32Thunk';fcns.name{fcnNum}='CameraGigeSetIp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tSdkCameraDevInfoPtr', 'cstring', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGigeGetMac ( tSdkCameraDevInfo * pCameraInfo , char * CamMac , char * EtMac ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringThunk';fcns.name{fcnNum}='CameraGigeGetMac'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tSdkCameraDevInfoPtr', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraEnableFastResponse ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraEnableFastResponse'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetCorrectDeadPixel ( CameraHandle hCamera , BOOL bEnable ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetCorrectDeadPixel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetCorrectDeadPixel ( CameraHandle hCamera , BOOL * pbEnable ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetCorrectDeadPixel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraFlatFieldingCorrectSetEnable ( CameraHandle hCamera , BOOL bEnable ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraFlatFieldingCorrectSetEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraFlatFieldingCorrectGetEnable ( CameraHandle hCamera , BOOL * pbEnable ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraFlatFieldingCorrectGetEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraFlatFieldingCorrectSetParameter ( CameraHandle hCamera , BYTE const * pDarkFieldingImage , tSdkFrameHead const * pDarkFieldingFrInfo , BYTE const * pLightFieldingImage , tSdkFrameHead const * pLightFieldingFrInfo ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraFlatFieldingCorrectSetParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'tSdkFrameHeadPtr', 'uint8Ptr', 'tSdkFrameHeadPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraFlatFieldingCorrectSetParameterEx ( CameraHandle hCamera , BYTE const * pDarkFieldingImage , tSdkFrameHead const * pDarkFieldingFrInfo , BYTE const * pLightFieldingImage , tSdkFrameHead const * pLightFieldingFrInfo , tSdkRect const * pRefRegion , tSdkRect const * pActRegion ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraFlatFieldingCorrectSetParameterEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'tSdkFrameHeadPtr', 'uint8Ptr', 'tSdkFrameHeadPtr', 'tSdkRectPtr', 'tSdkRectPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraFlatFieldingCorrectGetParameterState ( CameraHandle hCamera , BOOL * pbValid , char * pFilePath ); 
fcns.thunkname{fcnNum}='int32int32voidPtrcstringThunk';fcns.name{fcnNum}='CameraFlatFieldingCorrectGetParameterState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraFlatFieldingCorrectSaveParameterToFile ( CameraHandle hCamera , char const * pszFileName ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='CameraFlatFieldingCorrectSaveParameterToFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraFlatFieldingCorrectLoadParameterFromFile ( CameraHandle hCamera , char const * pszFileName ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='CameraFlatFieldingCorrectLoadParameterFromFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraFlatFieldingCorrectGetCoefficients ( CameraHandle hCamera , float * pCoefficients , int * pNumCoefficient ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraFlatFieldingCorrectGetCoefficients'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'singlePtr', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraFlatFieldingCorrectSetCoefficients ( CameraHandle hCamera , float * pCoefficients , int iNumCoefficient ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32Thunk';fcns.name{fcnNum}='CameraFlatFieldingCorrectSetCoefficients'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'singlePtr', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraCommonCall ( CameraHandle hCamera , char const * pszCall , char * pszResult , UINT uResultBufSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringuint32Thunk';fcns.name{fcnNum}='CameraCommonCall'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetDenoise3DParams ( CameraHandle hCamera , BOOL bEnable , int nCount , float * Weights ); 
fcns.thunkname{fcnNum}='int32int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraSetDenoise3DParams'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'singlePtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetDenoise3DParams ( CameraHandle hCamera , BOOL * bEnable , int * nCount , BOOL * bUseWeight , float * Weights ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetDenoise3DParams'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'singlePtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraManualDenoise3D ( tSdkFrameHead * InFramesHead , BYTE ** InFramesData , int nCount , float * Weights , tSdkFrameHead * OutFrameHead , BYTE * OutFrameData ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraManualDenoise3D'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'tSdkFrameHeadPtr', 'uint8PtrPtr', 'int32', 'singlePtr', 'tSdkFrameHeadPtr', 'uint8Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraCustomizeDeadPixels ( CameraHandle hCamera , HWND hParent ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraCustomizeDeadPixels'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'HWND__Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraReadDeadPixels ( CameraHandle hCamera , USHORT * pRows , USHORT * pCols , UINT * pNumPixel ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraReadDeadPixels'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16Ptr', 'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraAddDeadPixels ( CameraHandle hCamera , USHORT * pRows , USHORT * pCols , UINT NumPixel ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='CameraAddDeadPixels'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16Ptr', 'uint16Ptr', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraRemoveDeadPixels ( CameraHandle hCamera , USHORT * pRows , USHORT * pCols , UINT NumPixel ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='CameraRemoveDeadPixels'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16Ptr', 'uint16Ptr', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraRemoveAllDeadPixels ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraRemoveAllDeadPixels'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSaveDeadPixels ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraSaveDeadPixels'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSaveDeadPixelsToFile ( CameraHandle hCamera , char const * sFileName ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='CameraSaveDeadPixelsToFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraLoadDeadPixelsFromFile ( CameraHandle hCamera , char const * sFileName ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='CameraLoadDeadPixelsFromFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetImageBufferPriority ( CameraHandle hCamera , tSdkFrameHead * pFrameInfo , BYTE ** pbyBuffer , UINT wTimes , UINT Priority ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtruint32uint32Thunk';fcns.name{fcnNum}='CameraGetImageBufferPriority'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'tSdkFrameHeadPtr', 'uint8PtrPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% unsigned char * __stdcall CameraGetImageBufferPriorityEx ( CameraHandle hCamera , INT * piWidth , INT * piHeight , UINT wTimes , UINT Priority ); 
fcns.thunkname{fcnNum}='voidPtrint32voidPtrvoidPtruint32uint32Thunk';fcns.name{fcnNum}='CameraGetImageBufferPriorityEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8Ptr'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetImageBufferPriorityEx2 ( CameraHandle hCamera , BYTE * pImageData , UINT uOutFormat , int * piWidth , int * piHeight , UINT wTimes , UINT Priority ); 
fcns.thunkname{fcnNum}='int32int32voidPtruint32voidPtrvoidPtruint32uint32Thunk';fcns.name{fcnNum}='CameraGetImageBufferPriorityEx2'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'uint32', 'int32Ptr', 'int32Ptr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetImageBufferPriorityEx3 ( CameraHandle hCamera , BYTE * pImageData , UINT uOutFormat , int * piWidth , int * piHeight , UINT * puTimeStamp , UINT wTimes , UINT Priority ); 
fcns.thunkname{fcnNum}='int32int32voidPtruint32voidPtrvoidPtrvoidPtruint32uint32Thunk';fcns.name{fcnNum}='CameraGetImageBufferPriorityEx3'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'uint32', 'int32Ptr', 'int32Ptr', 'uint32Ptr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraClearBuffer ( CameraHandle hCamera ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='CameraClearBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSoftTriggerEx ( CameraHandle hCamera , UINT uFlags ); 
fcns.thunkname{fcnNum}='int32int32uint32Thunk';fcns.name{fcnNum}='CameraSoftTriggerEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetHDR ( CameraHandle hCamera , float value ); 
fcns.thunkname{fcnNum}='int32int32floatThunk';fcns.name{fcnNum}='CameraSetHDR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'single'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetHDR ( CameraHandle hCamera , float * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetHDR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'singlePtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetFrameID ( CameraHandle hCamera , UINT * id ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetFrameID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetFrameTimeStamp ( CameraHandle hCamera , UINT * TimeStampL , UINT * TimeStampH ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetFrameTimeStamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetHDRGainMode ( CameraHandle hCamera , int value ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetHDRGainMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetHDRGainMode ( CameraHandle hCamera , int * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetHDRGainMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraCreateDIBitmap ( HDC hDC , BYTE * pFrameBuffer , tSdkFrameHead * pFrameHead , HBITMAP * outBitmap ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraCreateDIBitmap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'HDC__Ptr', 'uint8Ptr', 'tSdkFrameHeadPtr', 'HBITMAP__PtrPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraDrawFrameBuffer ( BYTE * pFrameBuffer , tSdkFrameHead * pFrameHead , HWND hWnd , int Algorithm , int Mode ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='CameraDrawFrameBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr', 'tSdkFrameHeadPtr', 'HWND__Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraFlipFrameBuffer ( BYTE * pFrameBuffer , tSdkFrameHead * pFrameHead , int Flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='CameraFlipFrameBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr', 'tSdkFrameHeadPtr', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraConvertFrameBufferFormat ( CameraHandle hCamera , BYTE * pInFrameBuffer , BYTE * pOutFrameBuffer , int outWidth , int outHeight , UINT outMediaType , tSdkFrameHead * pFrameHead ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32int32uint32voidPtrThunk';fcns.name{fcnNum}='CameraConvertFrameBufferFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'uint8Ptr', 'int32', 'int32', 'uint32', 'tSdkFrameHeadPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetConnectionStatusCallback ( CameraHandle hCamera , CAMERA_CONNECTION_STATUS_CALLBACK pCallBack , PVOID pContext ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraSetConnectionStatusCallback'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetLightingControllerMode ( CameraHandle hCamera , int index , int mode ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetLightingControllerMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetLightingControllerState ( CameraHandle hCamera , int index , int state ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='CameraSetLightingControllerState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetFrameResendCount ( CameraHandle hCamera , int count ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetFrameResendCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetUndistortParams ( CameraHandle hCamera , int width , int height , double cameraMatrix [ 4 ], double distCoeffs [ 5 ] ); 
fcns.thunkname{fcnNum}='int32int32int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraSetUndistortParams'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetUndistortParams ( CameraHandle hCamera , int * width , int * height , double cameraMatrix [ 4 ], double distCoeffs [ 5 ] ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGetUndistortParams'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetUndistortEnable ( CameraHandle hCamera , BOOL bEnable ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetUndistortEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetUndistortEnable ( CameraHandle hCamera , BOOL * bEnable ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetUndistortEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraCustomizeUndistort ( CameraHandle hCamera , HWND hParent ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraCustomizeUndistort'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'HWND__Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetEyeCount ( CameraHandle hCamera , int * EyeCount ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetEyeCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraMultiEyeImageProcess ( CameraHandle hCamera , int iEyeIndex , BYTE * pbyIn , tSdkFrameHead * pInFrInfo , BYTE * pbyOut , tSdkFrameHead * pOutFrInfo , UINT uOutFormat , UINT uReserved ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrvoidPtrvoidPtrvoidPtruint32uint32Thunk';fcns.name{fcnNum}='CameraMultiEyeImageProcess'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8Ptr', 'tSdkFrameHeadPtr', 'uint8Ptr', 'tSdkFrameHeadPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetRegionAverageGray ( BYTE * pFrameBuffer , tSdkFrameHead * pFrameHead , int Left , int Top , int Width , int Height , int * AvgGray ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetRegionAverageGray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr', 'tSdkFrameHeadPtr', 'int32', 'int32', 'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetMediaCapability ( CameraHandle hCamera , int iMediaType , UINT * uCap ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetMediaCapability'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetMediaBitRate ( CameraHandle hCamera , int iMediaType , UINT uRate ); 
fcns.thunkname{fcnNum}='int32int32int32uint32Thunk';fcns.name{fcnNum}='CameraSetMediaBitRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetMediaBitRate ( CameraHandle hCamera , int iMediaType , UINT * uRate ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetMediaBitRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetFrameEventCallback ( CameraHandle hCamera , CAMERA_FRAME_EVENT_CALLBACK pCallBack , PVOID pContext ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraSetFrameEventCallback'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetNoiseReductionValue ( CameraHandle hCamera , int value ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetNoiseReductionValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetNoiseReductionValue ( CameraHandle hCamera , int * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetNoiseReductionValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetLogarithmicCurveValue ( CameraHandle hCamera , int value ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetLogarithmicCurveValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetLogarithmicCurveValue ( CameraHandle hCamera , int * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetLogarithmicCurveValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetSpliceLines ( CameraHandle hCamera , int numLines ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetSpliceLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetSpliceLines ( CameraHandle hCamera , int * numLines ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetSpliceLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSnapChannelBuffer ( CameraHandle hCamera , char const * pszChannelName , tSdkFrameHead * pFrameInfo , BYTE ** pbyBuffer , UINT wTimes ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='CameraSnapChannelBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'tSdkFrameHeadPtr', 'uint8PtrPtr', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraReleaseChannelBuffer ( CameraHandle hCamera , char const * pszChannelName , BYTE * pbyBuffer ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='CameraReleaseChannelBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint8Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSetRotaryEncTrigger ( CameraHandle hCamera , int action ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='CameraSetRotaryEncTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGetRotaryEncTrigger ( CameraHandle hCamera , int * action ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraGetRotaryEncTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraSubmitUserBufferSnap ( CameraHandle hCamera , BYTE * pUserBuffer , UINT * pUserBufferSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraSubmitUserBufferSnap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraCancelUserBufferSnap ( CameraHandle hCamera , BYTE * pUserBuffer ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='CameraCancelUserBufferSnap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraWaitUserBufferSnap ( CameraHandle hCamera , BYTE * pUserBuffer , INT * pSnapStatus , tSdkFrameHead * pFrameInfo , BYTE ** ppImgStart , UINT wTimes ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='CameraWaitUserBufferSnap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'int32Ptr', 'tSdkFrameHeadPtr', 'uint8PtrPtr', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_CreateFromDevicePage ( void ** Grabber ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CameraGrabber_CreateFromDevicePage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtrPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_CreateByIndex ( void ** Grabber , int Index ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CameraGrabber_CreateByIndex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_CreateByName ( void ** Grabber , char * Name ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='CameraGrabber_CreateByName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtrPtr', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_Create ( void ** Grabber , tSdkCameraDevInfo * pDevInfo ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGrabber_Create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtrPtr', 'tSdkCameraDevInfoPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_Destroy ( void * Grabber ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CameraGrabber_Destroy'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_SetHWnd ( void * Grabber , HWND hWnd ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGrabber_SetHWnd'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'HWND__Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_SetPriority ( void * Grabber , UINT Priority ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='CameraGrabber_SetPriority'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_StartLive ( void * Grabber ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CameraGrabber_StartLive'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_StopLive ( void * Grabber ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CameraGrabber_StopLive'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_SaveImage ( void * Grabber , void ** Image , DWORD TimeOut ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='CameraGrabber_SaveImage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtr', 'ulong'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_SaveImageAsync ( void * Grabber ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CameraGrabber_SaveImageAsync'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_SaveImageAsyncEx ( void * Grabber , void * UserData ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGrabber_SaveImageAsyncEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_SetSaveImageCompleteCallback ( void * Grabber , pfnCameraGrabberSaveImageComplete Callback , void * Context ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGrabber_SetSaveImageCompleteCallback'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_SetFrameListener ( void * Grabber , pfnCameraGrabberFrameListener Listener , void * Context ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGrabber_SetFrameListener'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_SetRawCallback ( void * Grabber , pfnCameraGrabberFrameCallback Callback , void * Context ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGrabber_SetRawCallback'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_SetRGBCallback ( void * Grabber , pfnCameraGrabberFrameCallback Callback , void * Context ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGrabber_SetRGBCallback'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_GetCameraHandle ( void * Grabber , CameraHandle * hCamera ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGrabber_GetCameraHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_GetStat ( void * Grabber , tSdkGrabberStat * stat ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGrabber_GetStat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tSdkGrabberStatPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraGrabber_GetCameraDevInfo ( void * Grabber , tSdkCameraDevInfo * DevInfo ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraGrabber_GetCameraDevInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'tSdkCameraDevInfoPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImage_Create ( void ** Image , BYTE * pFrameBuffer , tSdkFrameHead * pFrameHead , BOOL bCopy ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='CameraImage_Create'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtrPtr', 'uint8Ptr', 'tSdkFrameHeadPtr', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImage_CreateEmpty ( void ** Image ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CameraImage_CreateEmpty'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtrPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImage_Destroy ( void * Image ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CameraImage_Destroy'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImage_GetData ( void * Image , BYTE ** DataBuffer , tSdkFrameHead ** Head ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraImage_GetData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8PtrPtr', 'tSdkFrameHeadPtrPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImage_GetUserData ( void * Image , void ** UserData ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraImage_GetUserData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImage_SetUserData ( void * Image , void * UserData ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraImage_SetUserData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImage_IsEmpty ( void * Image , BOOL * IsEmpty ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CameraImage_IsEmpty'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImage_Draw ( void * Image , HWND hWnd , int Algorithm ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='CameraImage_Draw'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'HWND__Ptr', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImage_DrawFit ( void * Image , HWND hWnd , int Algorithm ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='CameraImage_DrawFit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'HWND__Ptr', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImage_DrawToDC ( void * Image , HDC hDC , int Algorithm , int xDst , int yDst , int cxDst , int cyDst ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32int32int32int32Thunk';fcns.name{fcnNum}='CameraImage_DrawToDC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'HDC__Ptr', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImage_DrawToDCFit ( void * Image , HDC hDC , int Algorithm , int xDst , int yDst , int cxDst , int cyDst ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32int32int32int32Thunk';fcns.name{fcnNum}='CameraImage_DrawToDCFit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'HDC__Ptr', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImage_BitBlt ( void * Image , HWND hWnd , int xDst , int yDst , int cxDst , int cyDst , int xSrc , int ySrc ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32int32int32int32int32Thunk';fcns.name{fcnNum}='CameraImage_BitBlt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'HWND__Ptr', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImage_BitBltToDC ( void * Image , HDC hDC , int xDst , int yDst , int cxDst , int cyDst , int xSrc , int ySrc ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32int32int32int32int32Thunk';fcns.name{fcnNum}='CameraImage_BitBltToDC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'HDC__Ptr', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImage_SaveAsBmp ( void * Image , char const * FileName ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='CameraImage_SaveAsBmp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImage_SaveAsJpeg ( void * Image , char const * FileName , BYTE Quality ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringuint8Thunk';fcns.name{fcnNum}='CameraImage_SaveAsJpeg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'uint8'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImage_SaveAsPng ( void * Image , char const * FileName ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='CameraImage_SaveAsPng'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% CameraSdkStatus __stdcall CameraImage_SaveAsRaw ( void * Image , char const * FileName , int Format ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='CameraImage_SaveAsRaw'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
structs.HWND__.members=struct('unused', 'int32');
structs.HDC__.members=struct('unused', 'int32');
structs.HBITMAP__.members=struct('unused', 'int32');
structs.tSdkRect.members=struct('iLeft', 'int32', 'iTop', 'int32', 'iWidth', 'int32', 'iHeight', 'int32');
structs.tSdkCameraDevInfo.members=struct('acProductSeries', 'int8#32', 'acProductName', 'int8#32', 'acFriendlyName', 'int8#32', 'acLinkName', 'int8#32', 'acDriverVersion', 'int8#32', 'acSensorType', 'int8#32', 'acPortType', 'int8#32', 'acSn', 'int8#32', 'uInstance', 'uint32');
structs.tSdkResolutionRange.members=struct('iHeightMax', 'int32', 'iHeightMin', 'int32', 'iWidthMax', 'int32', 'iWidthMin', 'int32', 'uSkipModeMask', 'uint32', 'uBinSumModeMask', 'uint32', 'uBinAverageModeMask', 'uint32', 'uResampleMask', 'uint32');
structs.tSdkImageResolution.members=struct('iIndex', 'int32', 'acDescription', 'int8#32', 'uBinSumMode', 'uint32', 'uBinAverageMode', 'uint32', 'uSkipMode', 'uint32', 'uResampleMask', 'uint32', 'iHOffsetFOV', 'int32', 'iVOffsetFOV', 'int32', 'iWidthFOV', 'int32', 'iHeightFOV', 'int32', 'iWidth', 'int32', 'iHeight', 'int32', 'iWidthZoomHd', 'int32', 'iHeightZoomHd', 'int32', 'iWidthZoomSw', 'int32', 'iHeightZoomSw', 'int32');
structs.tSdkColorTemperatureDes.members=struct('iIndex', 'int32', 'acDescription', 'int8#32');
structs.tSdkFrameSpeed.members=struct('iIndex', 'int32', 'acDescription', 'int8#32');
structs.tSdkExpose.members=struct('uiTargetMin', 'uint32', 'uiTargetMax', 'uint32', 'uiAnalogGainMin', 'uint32', 'uiAnalogGainMax', 'uint32', 'fAnalogGainStep', 'single', 'uiExposeTimeMin', 'uint32', 'uiExposeTimeMax', 'uint32');
structs.tSdkTrigger.members=struct('iIndex', 'int32', 'acDescription', 'int8#32');
structs.tSdkPackLength.members=struct('iIndex', 'int32', 'acDescription', 'int8#32', 'iPackSize', 'uint32');
structs.tSdkPresetLut.members=struct('iIndex', 'int32', 'acDescription', 'int8#32');
structs.tSdkAeAlgorithm.members=struct('iIndex', 'int32', 'acDescription', 'int8#32');
structs.tSdkBayerDecodeAlgorithm.members=struct('iIndex', 'int32', 'acDescription', 'int8#32');
structs.tSdkFrameStatistic.members=struct('iTotal', 'int32', 'iCapture', 'int32', 'iLost', 'int32');
structs.tSdkMediaType.members=struct('iIndex', 'int32', 'acDescription', 'int8#32', 'iMediaType', 'uint32');
structs.tGammaRange.members=struct('iMin', 'int32', 'iMax', 'int32');
structs.tContrastRange.members=struct('iMin', 'int32', 'iMax', 'int32');
structs.tRgbGainRange.members=struct('iRGainMin', 'int32', 'iRGainMax', 'int32', 'iGGainMin', 'int32', 'iGGainMax', 'int32', 'iBGainMin', 'int32', 'iBGainMax', 'int32');
structs.tSaturationRange.members=struct('iMin', 'int32', 'iMax', 'int32');
structs.tSharpnessRange.members=struct('iMin', 'int32', 'iMax', 'int32');
structs.tSdkIspCapacity.members=struct('bMonoSensor', 'int32', 'bWbOnce', 'int32', 'bAutoWb', 'int32', 'bAutoExposure', 'int32', 'bManualExposure', 'int32', 'bAntiFlick', 'int32', 'bDeviceIsp', 'int32', 'bForceUseDeviceIsp', 'int32', 'bZoomHD', 'int32');
structs.tSdkCameraCapbility.members=struct('pTriggerDesc', 'tSdkTriggerPtr', 'iTriggerDesc', 'int32', 'pImageSizeDesc', 'tSdkImageResolutionPtr', 'iImageSizeDesc', 'int32', 'pClrTempDesc', 'tSdkColorTemperatureDesPtr', 'iClrTempDesc', 'int32', 'pMediaTypeDesc', 'tSdkMediaTypePtr', 'iMediaTypdeDesc', 'int32', 'pFrameSpeedDesc', 'tSdkFrameSpeedPtr', 'iFrameSpeedDesc', 'int32', 'pPackLenDesc', 'tSdkPackLengthPtr', 'iPackLenDesc', 'int32', 'iOutputIoCounts', 'int32', 'iInputIoCounts', 'int32', 'pPresetLutDesc', 'tSdkPresetLutPtr', 'iPresetLut', 'int32', 'iUserDataMaxLen', 'int32', 'bParamInDevice', 'int32', 'pAeAlmSwDesc', 'tSdkAeAlgorithmPtr', 'iAeAlmSwDesc', 'int32', 'pAeAlmHdDesc', 'tSdkAeAlgorithmPtr', 'iAeAlmHdDesc', 'int32', 'pBayerDecAlmSwDesc', 'tSdkBayerDecodeAlgorithmPtr', 'iBayerDecAlmSwDesc', 'int32', 'pBayerDecAlmHdDesc', 'tSdkBayerDecodeAlgorithmPtr', 'iBayerDecAlmHdDesc', 'int32', 'sExposeDesc', 'tSdkExpose', 'sResolutionRange', 'tSdkResolutionRange', 'sRgbGainRange', 'tRgbGainRange', 'sSaturationRange', 'tSaturationRange', 'sGammaRange', 'tGammaRange', 'sContrastRange', 'tContrastRange', 'sSharpnessRange', 'tSharpnessRange', 'sIspCapacity', 'tSdkIspCapacity');
structs.tSdkFrameHead.members=struct('uiMediaType', 'uint32', 'uBytes', 'uint32', 'iWidth', 'int32', 'iHeight', 'int32', 'iWidthZoomSw', 'int32', 'iHeightZoomSw', 'int32', 'bIsTrigger', 'int32', 'uiTimeStamp', 'uint32', 'uiExpTime', 'uint32', 'fAnalogGain', 'single', 'iGamma', 'int32', 'iContrast', 'int32', 'iSaturation', 'int32', 'fRgain', 'single', 'fGgain', 'single', 'fBgain', 'single');
structs.sCameraFrame.members=struct('head', 'tSdkFrameHead', 'pBuffer', 'uint8Ptr');
structs.tSdkFrameEvent_.members=struct('uType', 'uint32', 'uStatus', 'uint32', 'uFrameID', 'uint32', 'uWidth', 'uint32', 'uHeight', 'uint32', 'uPixelFormat', 'uint32', 'TimeStampL', 'uint32', 'TimeStampH', 'uint32');
structs.tSdkGrabberStat.members=struct('Width', 'int32', 'Height', 'int32', 'Disp', 'int32', 'Capture', 'int32', 'Lost', 'int32', 'Error', 'int32', 'DispFps', 'single', 'CapFps', 'single');
enuminfo.emCameraGetImagePriority=struct('CAMERA_GET_IMAGE_PRIORITY_OLDEST',0,'CAMERA_GET_IMAGE_PRIORITY_NEWEST',1,'CAMERA_GET_IMAGE_PRIORITY_NEXT',2);
enuminfo.emSdkFileType=struct('FILE_JPG',1,'FILE_BMP',2,'FILE_RAW',4,'FILE_PNG',8,'FILE_BMP_8BIT',16,'FILE_PNG_8BIT',32,'FILE_RAW_16BIT',64,'FILE_TIFF',128,'FILE_TIFF_16BIT',256);
enuminfo.emSdkParameterMode=struct('PARAM_MODE_BY_MODEL',0,'PARAM_MODE_BY_NAME',1,'PARAM_MODE_BY_SN',2,'PARAM_MODE_IN_DEVICE',3);
enuminfo.emSdkRecordMode=struct('RECORD_STOP',0,'RECORD_START',1,'RECORD_PAUSE',2);
enuminfo.emExtTrigShutterMode=struct('EXT_TRIG_EXP_STANDARD',0,'EXT_TRIG_EXP_GRR',1);
enuminfo.emSdkDisplayMode=struct('DISPLAYMODE_SCALE',0,'DISPLAYMODE_REAL',1,'DISPLAYMODE_2X',2,'DISPLAYMODE_4X',3,'DISPLAYMODE_8X',4,'DISPLAYMODE_16X',5,'DISPLAYMODE_SCALE_FIT',6);
enuminfo.emSdkLightFrequency=struct('LIGHT_FREQUENCY_50HZ',0,'LIGHT_FREQUENCY_60HZ',1);
enuminfo.emSdkParameterTeam=struct('PARAMETER_TEAM_DEFAULT',255,'PARAMETER_TEAM_A',0,'PARAMETER_TEAM_B',1,'PARAMETER_TEAM_C',2,'PARAMETER_TEAM_D',3);
enuminfo.emCameraSoftTriggerExFlags=struct('CAMERA_ST_CLEAR_BUFFER_BEFORE',1);
enuminfo.emSdkResolutionMode=struct('RES_MODE_PREVIEW',0,'RES_MODE_SNAPSHOT',1);
enuminfo.emSdkClrTmpMode=struct('CT_MODE_AUTO',0,'CT_MODE_PRESET',1,'CT_MODE_USER_DEF',2);
enuminfo.emSdkRunMode=struct('RUNMODE_PLAY',0,'RUNMODE_PAUSE',1,'RUNMODE_STOP',2);
enuminfo.emSdkLutChannel=struct('LUT_CHANNEL_ALL',0,'LUT_CHANNEL_RED',1,'LUT_CHANNEL_GREEN',2,'LUT_CHANNEL_BLUE',3);
enuminfo.emSdkPropSheetMask=struct('PROP_SHEET_INDEX_EXPOSURE',0,'PROP_SHEET_INDEX_ISP_COLOR',1,'PROP_SHEET_INDEX_ISP_LUT',2,'PROP_SHEET_INDEX_ISP_SHAPE',3,'PROP_SHEET_INDEX_VIDEO_FORMAT',4,'PROP_SHEET_INDEX_RESOLUTION',5,'PROP_SHEET_INDEX_IO_CTRL',6,'PROP_SHEET_INDEX_TRIGGER_SET',7,'PROP_SHEET_INDEX_OVERLAY',8,'PROP_SHEET_INDEX_DEVICE_INFO',9,'PROP_SHEET_INDEX_OPTIONS_I',0,'PROP_SHEET_INDEX_MULTI_EXPOSURE',11,'PROP_SHEET_INDEX_SPECIAL',12,'PROP_SHEET_INDEX_GIGE',13,'PROP_SHEET_INDEX_GF_SETTING_I',14,'ROP_SHEET_INDEX_GF_SETTING_II',15,'PROP_SHEET_INDEX_NEW_ISP_COLOR',16,'PROP_SHEET_INDEX_MULTIROI_SET',17,'PROP_SHEET_INDEX_FOCUS',18);
enuminfo.emSdkRefWinType=struct('REF_WIN_AUTO_EXPOSURE',0,'REF_WIN_WHITE_BALANCE',1);
enuminfo.emStrobeControl=struct('STROBE_SYNC_WITH_TRIG_AUTO',0,'STROBE_SYNC_WITH_TRIG_MANUAL',1,'STROBE_ALWAYS_HIGH',2,'STROBE_ALWAYS_LOW',3);
enuminfo.emCameraDrawTextFlags=struct('CAMERA_DT_VCENTER',1,'CAMERA_DT_BOTTOM',2,'CAMERA_DT_HCENTER',4,'CAMERA_DT_RIGHT',8,'CAMERA_DT_SINGLELINE',16,'CAMERA_DT_ALPHA_BLEND',32,'CAMERA_DT_ANTI_ALIASING',64);
enuminfo.emCameraGPIOFormat=struct('IOFORMAT_SINGLE',0,'IOFORMAT_RS422',1,'IOFORMAT_RS422_TERM',2,'IOFORMAT_OCEP',3);
enuminfo.emCameraGPIOMode=struct('IOMODE_TRIG_INPUT',0,'IOMODE_STROBE_OUTPUT',1,'IOMODE_GP_INPUT',2,'IOMODE_GP_OUTPUT',3,'IOMODE_PWM_OUTPUT',4,'IOMODE_ROTARYENC_INPUT',5);
enuminfo.emExtTrigSignal=struct('EXT_TRIG_LEADING_EDGE',0,'EXT_TRIG_TRAILING_EDGE',1,'EXT_TRIG_HIGH_LEVEL',2,'EXT_TRIG_LOW_LEVEL',3,'EXT_TRIG_DOUBLE_EDGE',4);
enuminfo.emSdkRotateDirection=struct('ROTATE_DIRECTION_0',0,'ROTATE_DIRECTION_90',1,'ROTATE_DIRECTION_180',2,'ROTATE_DIRECTION_270',3);
enuminfo.emSdkPropSheetMsg=struct('SHEET_MSG_LOAD_PARAM_DEFAULT',0,'SHEET_MSG_LOAD_PARAM_GROUP',1,'SHEET_MSG_LOAD_PARAM_FROMFILE',2,'SHEET_MSG_SAVE_PARAM_GROUP',3);
enuminfo.emSdkFrameSpeed=struct('FRAME_SPEED_LOW',0,'FRAME_SPEED_NORMAL',1,'FRAME_SPEED_HIGH',2,'FRAME_SPEED_SUPER',3);
enuminfo.emSdkSnapMode=struct('CONTINUATION',0,'SOFT_TRIGGER',1,'EXTERNAL_TRIGGER',2,'ROTARYENC_TRIGGER',3,'ROTARYENC_COND_TRIGGER',4);
enuminfo.emSdkMirrorDirection=struct('MIRROR_DIRECTION_HORIZONTAL',0,'MIRROR_DIRECTION_VERTICAL',1);
enuminfo.emSdkIspProcessor=struct('ISP_PROCESSSOR_PC',0,'ISP_PROCESSSOR_DEVICE',1);
enuminfo.emEvaluateDefinitionAlgorith=struct('EVALUATE_DEFINITION_DEVIATION',0,'EVALUATE_DEFINITION_SMD',1,'EVALUATE_DEFINITION_GRADIENT',2,'EVALUATE_DEFINITION_SOBEL',3,'EVALUATE_DEFINITION_ROBERT',4,'EVALUATE_DEFINITION_LAPLACE',5,'EVALUATE_DEFINITION_ALG_MAX',6);
enuminfo.emSdkLutMode=struct('LUTMODE_PARAM_GEN',0,'LUTMODE_PRESET',1,'LUTMODE_USER_DEF',2);
methodinfo=fcns;